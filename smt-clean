#!/usr/bin/python

import os,sys,getopt,re,shutil
import MySQLdb
from ConfigParser import SafeConfigParser

def smtPullMirrored(dbuser,dbpassword,dbhost,db):
    results = []
    try:
        conn = MySQLdb.connect(dbhost,dbuser,dbpassword,db);
        cursor = conn.cursor()
        cursor.execute("select LOCALPATH from Catalogs where DOMIRROR='Y';")
        results = cursor.fetchall()
    except MySQLdb.Error, e:
        print "Error %d: %s" % (e.args[0], e.args[1])
        sys.exit(1)
    finally:
        if conn:
            conn.close()
    return results

def extractUnmirrored(walkroot,dbdirs):
    results = []
    syncdirs = set()

    for dbdir in dbdirs:
        mirrordir = re.sub('//','/',walkroot + "/" + dbdir[0])
        if mirrordir[-1] == "/":
            mirrordir = mirrordir[:len(mirrordir)-1]
        syncdirs.add(mirrordir)
    
    checkdirs = ["$RCE","SUSE","RPMMD"]

    for checkdir in checkdirs:
        walkdir = os.path.abspath(walkroot + "/" + checkdir)
        walkdirlen = len(re.split("/",walkdir))

        for root, subdirs, files in os.walk(walkdir):
            splitroot = re.split('/',root)
            lastdir = splitroot[-1]
            check = False
            if checkdir == "$RCE":
                if "SLE" in splitroot[-2] or "RES" in splitroot[-2]:
                    check = True
            elif checkdir == "SUSE":
                if lastdir == "product" or lastdir == "update":
                    check = True
            elif checkdir == "RPMMD":
                if checkdir == splitroot[-2]:
                    check = True
            if check:
                if root not in syncdirs:
                    results.append(root)
    return results

def pruneDirs(dirlist):
    for dir in dirlist:
        print "Removing",dir
        shutil.rmtree(dir)
    return 

if __name__ == "__main__":
    smtconfig = "/etc/smt.conf"
    smtroot = "/srv/www/htdocs/repo"
    argv = sys.argv[1:]

    try:
        opts, args = getopt.getopt(argv,"hr:c:",["help","root=","config="])
    except getopt.GetoptError:
        print "Error testing for options"
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h","--help"):
            print "Usage: smt-clean [options]"
            print
            print "Options:"
            print
            print "-c --config  The main SMT config file  -- Default:", smtconfig
            print "-r --root    Root of the SMT file tree -- Default:", smtroot
            print
            sys.exit(0)
        elif opt in ("-r","--root"):
            smtroot = arg
        elif opt in ("-c","--config"):
            smtconfig = arg

    print "Pulling database connection info from", smtconfig
    parser = SafeConfigParser()
    parser.read(smtconfig)

    print "Connecting to database to query mirrored repositories"
    mirrordirs = smtPullMirrored(parser.get("DB","user"),parser.get("DB","pass"),re.split("=",re.split(";", parser.get("DB","config"))[1])[1],re.split("=",re.split(";", parser.get("DB","config"))[0])[1])

    print "Comparing to file tree at", smtroot
    
    prunedirs = extractUnmirrored(smtroot,mirrordirs)
    result = pruneDirs(prunedirs)
